/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.openxdata.modules.workflows.server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.output.XMLOutputter;
import org.openxdata.modules.workflows.model.shared.DBSpecification;
import org.openxdata.modules.workflows.server.context.WFContext;
import org.openxdata.modules.workflows.server.service.SpecificationService;
import org.openxdata.modules.workflows.server.service.WorkItemsService;
import org.openxdata.modules.workflows.model.shared.GWTFriendlyWorkItem;
import org.openxdata.modules.workflows.model.shared.WorkItemQuestion;
import org.openxdata.server.admin.model.exception.OpenXDataException;
import org.springframework.stereotype.Component;
import org.yawlfoundation.yawl.elements.data.YParameter;
import org.yawlfoundation.yawl.engine.YSpecificationID;
import org.yawlfoundation.yawl.engine.interfce.TaskInformation;
import org.yawlfoundation.yawl.engine.interfce.WorkItemRecord;
import org.yawlfoundation.yawl.engine.interfce.interfaceB.InterfaceBWebsideController;
import org.yawlfoundation.yawl.exceptions.YAWLException;
import org.yawlfoundation.yawl.util.JDOMUtil;

/**
 * 
 * @author kay
 */
@Component("YawlOXDCustomService")
public class YawlOXDCustomService extends InterfaceBWebsideController
{
    private String _sessionHandle = null;

    public static YawlOXDCustomService getInstance()
    {
        return WFContext.getYawlService();
    }

    @Override
    public void handleEnabledWorkItemEvent(WorkItemRecord enabledWorkItem)
    {
        try {
            initSessionHandle();
            extractAndSaveSpec(enabledWorkItem);

            WorkItemsService workItemsService = WFContext.getWorkItemsService();

            enabledWorkItem = checkOut(enabledWorkItem.getID(), _sessionHandle);
            workItemsService.saveWorkItem(enabledWorkItem);

            List<WorkItemRecord> childWirs = checkOutChildren(enabledWorkItem.getID());
            for (WorkItemRecord workItemRecord : childWirs) {
                workItemsService.saveWorkItem(workItemRecord);
            }
        } catch (Exception ex) {
            Logger.getLogger(YawlOXDCustomService.class.getName()).log(
                    Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
    }

    @Override
    public void handleCancelledWorkItemEvent(WorkItemRecord workItemRecord)
    {
        // throw new
        // UnsupportedOperationException("Cancelled work Item Not supported yet.");
    }

    private String initSessionHandle() throws IOException
    {

        if (!checkConnection(_sessionHandle)) {
            _sessionHandle = connect(DEFAULT_ENGINE_USERNAME,
                    DEFAULT_ENGINE_PASSWORD);
        }
        if (!successful(_sessionHandle)) {
            _logger.error("Unsuccessful");
            throw new RuntimeException("Failed to initialise session handle");
        }
        return _sessionHandle;
    }

    private void extractAndSaveSpec(WorkItemRecord wir) throws IOException, OpenXDataException
    {
        YSpecificationID specId = new YSpecificationID(
                wir.getSpecificationID(), wir.getSpecVersion());
        SpecificationService specService = WFContext.getSpecificationService();
        DBSpecification dbSpec = specService.getDBSpecWithSpecID(specId.getSpecName() + specId.getVersionAsString());

        if (dbSpec == null) {
            String specification = _interfaceBClient.getSpecification(specId, initSessionHandle());
            specService.saveSpecs(specification);
        }
    }

    private List<WorkItemRecord> checkOutChildren(String workItemId)
            throws IOException, YAWLException
    {
        initSessionHandle();

        List<WorkItemRecord> children = getChildren(workItemId, _sessionHandle);

        for (int i = 0; i < children.size(); i++) {

            WorkItemRecord itemRecord = (WorkItemRecord) children.get(i);
            if (WorkItemRecord.statusFired.equals(itemRecord.getStatus())) {
                checkOut(itemRecord.getID(), _sessionHandle);
            }
        }
        return children;
    }

    public List<YParameter> getOutputParams(WorkItemRecord wir)
            throws IOException
    {
        YSpecificationID specId = new YSpecificationID(
                wir.getSpecificationID(), wir.getSpecVersion());
        TaskInformation taskInfo = getTaskInformation(specId, wir.getTaskID(),
                _sessionHandle);
        List<YParameter> outputParams = taskInfo.getParamSchema().getOutputParams();
        return outputParams;
    }

    public GWTFriendlyWorkItem getGWTFriendlyWorkItem(WorkItemRecord wir,
                                                      boolean includeOutParams)
            throws IOException
    {
        List<WorkItemQuestion> itemQuestions = createQuestionListFromXML(wir.getDataList());
        GWTFriendlyWorkItem gwtfwi = new GWTFriendlyWorkItem(wir.getID());
        gwtfwi.getInputParams().addAll(itemQuestions);
        gwtfwi.setEnabledTime(wir.getEnablementTime());
        gwtfwi.setState(wir.getStatus());
        gwtfwi.setTaskName4Disp(wir.getTaskIDForDisplay());

        if (includeOutParams) { // Add the output params
            List<YParameter> outputParams = getOutputParams(wir);
            List<WorkItemQuestion> outputQuestions = createOutPutQuestionList(outputParams);
            gwtfwi.getOutputParams().addAll(outputQuestions);
        }
        return gwtfwi;
    }

    public static List<WorkItemQuestion> createQuestionListFromXML(
            Element dataList)
    {
        List<WorkItemQuestion> questions = new ArrayList<WorkItemQuestion>();
        if (dataList == null)
            return questions;
        List children = dataList.getChildren();
        for (Object object : children) {
            Element elem = (Element) object;
            questions.add(new WorkItemQuestion(elem.getName(), elem.getText()));
        }
        return questions;
    }

    public static List<WorkItemQuestion> createOutPutQuestionList(
            List<YParameter> outputParams)
    {
        List<WorkItemQuestion> list = new ArrayList<WorkItemQuestion>();
        for (YParameter yParameter : outputParams) {
            String name = yParameter.getName();
            String dataTypeName = yParameter.getDataTypeName();
            WorkItemQuestion workItemQuestion = new WorkItemQuestion(name, null);
            workItemQuestion.setType(dataTypeName);
            list.add(workItemQuestion);
        }
        return list;
    }

    public void checkInWorkItem(WorkItemRecord workitem, String datalist) throws IOException, JDOMException
    {
        cacheItem(workitem);
        String initSessionHandle = initSessionHandle();
        Element inputData = JDOMUtil.stringToElement(workitem.getDataListString());
        Element outputData = JDOMUtil.stringToElement(datalist);
        checkInWorkItem(workitem.getID(), inputData, outputData, initSessionHandle);
    }

    private void cacheItem(WorkItemRecord workitem)
    {
        _model.addWorkItem(workitem);
    }
}
